snippet Main
options head
    #[allow(dead_code)]
    #[allow(unused_imports)]
    fn read<T: std::str::FromStr>() -> T {
    use std::io::*;
    let stdin = stdin();
    let stdin = stdin.lock();
    let token: String = stdin
        .bytes()
        .map(|c| c.expect("failed to read char") as char)
        .skip_while(|c| c.is_whitespace())
        .take_while(|c| !c.is_whitespace())
        .collect();
    token.parse().ok().expect("failed to parse token")
    }
    fn main(){

    }
}

snippet BIT
options head
    struct Bit {
    n:usize,
    bit:Vec<i64>
    }
    impl Bit {
    fn new(_n:usize) -> Self {
        let vec:Vec<i64> = vec![0;_n + 1];
        Bit {
            bit:vec,
            n:_n
        }
    }
    fn add(&mut self,mut id:usize,x:i64){
        id += 1;
        while id <= self.n {
            self.bit[id] += x;
            let i = id as i64;
            id += (i & (-i)) as usize;
        }
    }
    //sum of [0,i)
    fn sum(&mut self, mut id:usize) -> i64 {
        let mut s:i64 = 0;
        let mut i = id as i64;
        while i > 0 {
            id = i as usize;
            s += self.bit[id];
            i -= i & (-i);
        }
        s
    }
    //sum of [a,b);
    fn segment_sum(&mut self,a:usize,b:usize) -> i64{
       self.sum(b) - self.sum(a)
        }
    }

snippet Euclid
options head 
    fn gcd(mut x:i64,mut y:i64) -> i64 {
    let mut r = 1;
    if x < y{
        std::mem::swap(&mut x,&mut y);
    }
    while r != 0 {
        r = x % y;
        x = y;
        y = r;
        }
        x
    }

    fn lcm(x:i64,y:i64) -> i64{
        let div = gcd(x,y);
        x / div * y
    }

snippet LCA
options head
    struct LCA{
        depth:Vec<u32>,
        dig:i32,
        cost:Vec<Vec<i32>>,
        costs:Vec<i32>,
        g:Vec<Vec<usize>>,
        doubling:Vec<Vec<Option<usize>>>
    }

    impl LCA{
        fn new(_n:usize) -> Self{
            let dep:Vec<u32> = vec![0;_n];
            let  c:Vec<i32> = vec![0;_n];
            let  _c:Vec<Vec<i32>> = vec![vec![];_n];
            let  _g:Vec<Vec<usize>> = vec![vec![];_n];
            let  digit:usize = 64;
            let  doub:Vec<Vec<Option<usize>>> = vec![vec![None;_n];digit];
            LCA{
                depth:dep,
                costs:c,
                cost:_c,
                doubling:doub,
                dig:digit as i32,
                g:_g
            }
        }
    
    fn addedge(&mut self,u:usize,v:usize,c:i32){//コスト指定がなければc = 0を渡す
            self.g[u].push(v);
            self.g[v].push(u);
            self.cost[u].push(c);
            self.cost[v].push(c);
        }

    fn dfs(&mut self,now:usize,par:Option<usize>,d:u32,c:i32){
            self.doubling[0][now] = par;
            self.depth[now] = d;
            self.costs[now] = c;
            for i in 0..self.g[now].len(){
                if Some(self.g[now][i]) != par {
                    self.dfs(self.g[now][i],Some(now),d + 1, c + self.cost[now][i]);
                }
            }
        }

    fn construct(&mut self){
            self.dfs(0,None,0,0);
            for i in 0..(self.dig as usize - 1){
                for j in 0..self.doubling[i].len(){
                    if self.doubling[i][j].is_some(){
                        self.doubling[i + 1][j] = self.doubling[i][self.doubling[i][j].unwrap()];
                    }
                }
            }
        }

    fn answer_to_query(&mut self, mut u:usize,mut v:usize) -> i32{
            if self.depth[u] > self.depth[v] {
                std::mem::swap(&mut u,&mut v);
            }
            for i in 0..self.dig as usize {
                if (((self.depth[v] - self.depth[u]) >> i) & 1) > 0 {
                    v = self.doubling[i][v].unwrap();
                }
            }
            if u == v {
                return u as i32;
            }
            for i in (0..self.dig as usize).rev(){
                if self.doubling[i][u] != self.doubling[i][v]{
                    u = self.doubling[i][u].unwrap();
                    v = self.doubling[i][v].unwrap();
                }
            }
            self.doubling[0][u].unwrap() as i32
        }

    fn length(&mut self,u:usize,v:usize) -> i32 {
            let f = self.answer_to_query(u,v) as usize;
            self.depth[u] + self.depth[v] - 2 * self.depth[f]
        }

    fn dist(&mut self, u:usize,v:usize)-> i32 {
            let f = self.answer_to_query(u,v) as usize;
            self.costs[u] + self.costs[v] - 2 * self.costs[f]
        }
    
    fn is_on_path(&mut self,u:usize,v:usize,x:usize) -> bool {
            self.length(u,x) + self.length(v,x) == self.length(u,v)
        }
    }

snippet Unionfind
alias UF
options head
    struct union_find{
    par:Vec<i64>
    }
    impl union_find {
        fn new(n:usize) -> Self {
            let mut vec:Vec<i64> = vec![-1;n];
            union_find {
                par:vec
            }
        }
        fn root<T>(&mut self, x:T) -> T{
            if self.par[x] < 0{
                x
            }
            else{
                par[x] = self.root(par[x]);
            }
        }
        fn same<T>(&mut self, x:T, y:T) -> bool {
            self.root(x) == self.root(y);
        }
        fn unite<T>(&mut self, &mut x:T, &mut y:T) -> bool
        {
            x = self.root(x);
            y = self.root(y);
            if x == y {
                false
            }
            if self.par[x] > self.par[y]{
                std::mem::swap(&mut x, &mut y);
            }
                self.par[x] += self.par[y];
                self.par[y] = x;
                true
        }
        fn size<T> (x:T) -> i64{
            -par[root(x)]
        }
    }

snippet enum_divisors
alias enum
options head
     fn enum_divisors(n:i64) -> Vec<i64> {
        let mut res:Vec<i64> = Vec::new();
        let mut i = 1;
        while i * i <= n{
            if n % i == 0{
                let f = n / i;
                if f != i{
                    res.push(f);
                }
                res.push(i);
            }
            i += 1;
        }
        res.sort();
        res
    }
